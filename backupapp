import React from 'react';
import { StyleSheet, Text, View, TouchableHighlight, TouchableOpacity, TouchableNativeFeedback, TouchableWithoutFeedback } from 'react-native';

export default class App extends React.Component {
  constructor(props){
    super(props);
    this.startExperience = this.startExperience.bind(this);
    this.audioButtonPlay = this.audioButtonPlay.bind(this);
    this.state = {
      pageState: 'intro',
      recordingState: null,
    }
  }
  startExperience() {
    this.setState({pageState: 'audio', recordingState: 'init'})
  }
  audioButtonPlay() {
    const recordingState = this.state.recordingState;
    if (recordingState == 'init'){
      this.setState({recordingState: 'recording'});
    } else if (recordingState == 'recording'){
      this.setState({recordingState: 'paused'});
    } else if (recordingState == 'paused'){
      this.setState({recordingState: 'recording'})
    }
  }
  introPageRender() {
    if (this.state.pageState == 'intro'){
      return (
        <View>
          <DialogInstruction/>
          <ButtonStartExperience pressFunction={this.startExperience}/>
        </View>
      )
    }
   else {
      return (null);
    }
  }
  audioPageRender() {
    if (this.state.pageState == 'audio'){
      return (
        <View>
          <ButtonAudioPlay onPress={this.audioButtonPlay} recordingState={this.state.recordingState}/>
          <ButtonAudioShare/>
        </View>
      )
    }
   else {
      return (null);
    }
  }

  render() {
    return (
      <View style={styles.container}>
        {this.introPageRender()}
        {this.audioPageRender()}
      </View>
    );
  }
}



class DialogInstruction extends React.Component {

  render() {
    return (
      <View style={[styles.instructionTextHolder]}>
        <Text style={[styles.instructionText]}>
        'Blackbox' is another way of talking.Send a voice recording, and receive one back. Each recording is unique, and will only be played once.
        </Text>
      </View>
    )
  }
}

class ButtonStartExperience extends React.Component {
  render() {
    return (
      <TouchableOpacity underlayColor="white" onPress={this.props.pressFunction} >
        <View style={styles.instructionButtonBegin}>
          <Text style={styles.instructionButtonText}>Start an exchange</Text>
        </View>
      </TouchableOpacity>
    )
  }
}

class ButtonAudioPlay extends React.Component {
  render() {
    let buttonText;
    let buttonStyle;
    let buttonTextStyle;
    let recordingState = this.props.recordingState;
    if (recordingState == 'init'){
      buttonText = 'Record';
      buttonStyle = [styles.audioButtonContainer, styles.audioButtonContainerPlayInit]
      buttonTextStyle = [styles.audioButtonTextPlayInit]
    } else if (recordingState == 'recording') {
      buttonText = 'Pause';
      buttonStyle = [styles.audioButtonContainer, styles.audioButtonContainerPlayPlaying]
      buttonTextStyle = [styles.audioButtonTextPlayPlaying]
    } else if (recordingState == 'paused') {
      buttonText = 'Resume';
      buttonStyle = [styles.audioButtonContainer, styles.audioButtonContainerPlayPlaying]
      buttonTextStyle = [styles.audioButtonTextPlayPlaying]
    }
    return (
      <TouchableOpacity onPress={this.props.onPress}>
        <View style={buttonStyle}>
          <Text style={buttonTextStyle}>{buttonText}</Text>
        </View>
      </TouchableOpacity>
    )
  }
}


class ButtonAudioShare extends React.Component {
  render() {
    let buttonStyle = null;
    let buttonTextStyle = null;

    if (this.props.recordingState == 'init'){
      buttonStyle = [styles.audioButtonContainer, styles.audioButtonDisabled];
      buttonTextStyle = [styles.audioButtonText, styles.audioButtonTextDisabled];
    } else {
      buttonStyle = [styles.audioButtonContainer, styles.audioButtonDisabled];
      buttonTextStyle = [styles.audioButtonText, styles.audioButtonTextShare];
    }

    return (
      <TouchableOpacity>
        <View style={[styles.audioButtonContainer, styles.audioButtonContainerShare]}>
          <Text style={[styles.audioButtonText, styles.audioButtonTextShare]}>
            Share
          </Text>
        </View>
      </TouchableOpacity>
    )
  }
}


const audioButtonFontSize = 24;
const colorActionStart = '#73DDC8';
const colorActionPause = 'yellow';
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
    alignItems: 'center',
    justifyContent: 'center',
  },
  audioButtonContainer: {
    width: '80%',
    maxWidth: 400,
    marginBottom: 20,
    borderWidth: 1,
    padding: 20,
  },
  audioButtonContainerPlayInit: {
    borderColor: colorActionStart,
  },
  audioButtonContainerPlayPlaying: {
    borderColor: colorActionPause,
  },
  audioButtonContainerPlayPaused: {
    borderColor: colorActionPause,
  },
  audioButtonContainerShare : {
    borderColor: colorActionStart,
  },
  audioButtonTextPlayInit: {
    fontSize: audioButtonFontSize,
    color: colorActionStart,
  },
  audioButtonTextPlayPlaying: {
    fontSize: audioButtonFontSize,
    color: colorActionPause,
  },
  audioButtonTextPlayPaused: {
    fontSize: audioButtonFontSize,
    color: colorActionPause,
  },
  audioButtonTextShare: {
    color: colorActionStart,
  },
  instructionTextHolder: {
    borderColor: '#464646',
    borderWidth: 1,
    padding: 20,
    color: '#9C9A9A',
    width: '80%',
  },
  instructionText: {
    color: '#9C9A9A',
    fontSize: 22,
  },
  instructionButtonBegin: {
    fontSize: 24,
    color: '#DF81C0',
    borderColor: '#DF81C0',
    borderWidth: 1,
    padding: 20,
    width: '80%',
  },
  instructionButtonText: {
    color: '#DF81C0',
    fontSize: 24,
  },
});
